apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-nodes
  namespace: db
  labels:
    app: postgres-nodes
    role: data
spec:
  serviceName: postgres-nodes
  replicas: 4  # 1 master + 1 sync replica + 2 async replicas
  selector:
    matchLabels:
      app: postgres-nodes
  template:
    metadata:
      labels:
        app: postgres-nodes
        role: data
    spec:
      securityContext:
        fsGroup: 101
        runAsUser: 101
        runAsGroup: 101
      initContainers:
      - name: pg-auto-failover-init
        image: citusdata/pg_auto_failover:latest
        command: ["/bin/bash", "/etc/scripts/init-node.sh"]
        env:
        - name: PGDATA
          value: /var/lib/postgresql/pgdata
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: postgres
        - name: PG_AUTOCTL_MONITOR
          value: postgres://autoctl_node@postgres-monitor.db.svc.cluster.local:5432/pg_auto_failover
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/pgdata
        - name: postgres-node-config
          mountPath: /etc/config
          readOnly: true
        - name: postgres-secrets
          mountPath: /etc/secrets
          readOnly: true
        - name: pg-auto-failover-config
          mountPath: /etc/scripts
          readOnly: true
      containers:
      - name: postgres
        image: citusdata/pg_auto_failover:latest
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: PGDATA
          value: /var/lib/postgresql/pgdata
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-creds
              key: postgres-password
        - name: PG_AUTOCTL_MONITOR
          value: postgres://autoctl_node@postgres-monitor.db.svc.cluster.local:5432/pg_auto_failover
        - name: PG_AUTOCTL_SSL_SELF_SIGNED
          value: "true"
        - name: PG_AUTOCTL_SSL_MODE
          value: require
        command:
        - /bin/bash
        - -c
        - |
          # Start pg_auto_failover in background
          pg_autoctl run --pgdata $PGDATA &

          # Keep container running
          wait
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/pgdata
        - name: postgres-node-config
          mountPath: /etc/postgresql
          readOnly: true
        - name: postgres-secrets
          mountPath: /etc/secrets
          readOnly: true
        - name: pg-auto-failover-config
          mountPath: /etc/pg-auto-failover
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                # Graceful shutdown of pg_auto_failover
                pg_autoctl stop --pgdata $PGDATA
      # Sidecar container for pg_auto_failover management
      - name: pg-auto-failover-sidecar
        image: citusdata/pg_auto_failover:latest
        command:
        - /bin/bash
        - -c
        - |
          # Monitor and manage pg_auto_failover state
          while true; do
            # Check node status
            pg_autoctl show state --pgdata /var/lib/postgresql/pg data || true

            # Update service labels based on role
            NODE_STATE=$(pg_autoctl show state --pgdata /var/lib/postgresql/data --json 2>/dev/null | jq -r '.nodes[0].current_role // "unknown"')

            if [ "$NODE_STATE" = "primary" ]; then
              # This is a primary node
              kubectl label pod $(hostname) role=primary --overwrite || true
            elif [ "$NODE_STATE" = "secondary" ]; then
              # This is a replica node
              kubectl label pod $(hostname) role=replica --overwrite || true
            fi

            sleep 30
          done
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/pgdata
        - name: postgres-secrets
          mountPath: /etc/secrets
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: postgres-node-config
        configMap:
          name: postgres-node-config
      - name: postgres-secrets
        secret:
          secretName: postgres-creds
      - name: pg-auto-failover-config
        configMap:
          name: pg-auto-failover-config
          defaultMode: 0755
      restartPolicy: Always
      serviceAccountName: postgres-service-account
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi
      storageClassName: standard
