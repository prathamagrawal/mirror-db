apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-monitor
  namespace: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-monitor
  template:
    metadata:
      labels:
        app: postgres-monitor
    spec:
      securityContext:
        fsGroup: 101
        runAsUser: 101
        runAsGroup: 101
      # Increase grace period for clean shutdown
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: init-db
          image: citusdata/pg_auto_failover:latest
          command: ["/bin/bash", "-c"]
          args:
            - |
              #!/bin/bash
              set -eux
              export PATH="/usr/lib/postgresql/11/bin:/usr/local/bin:$PATH"
              export PGDATA=/var/lib/postgresql/pgdata/monitor
              export PGPORT=6001
              export PGUSER=postgres
              mkdir -p $PGDATA
              MY_IP=$(hostname -i)
              pg_autoctl create monitor \
                --hostname "$MY_IP" \
                --pgport "$PGPORT" \
                --auth trust \
                --ssl-self-signed \
                --pgdata "$PGDATA"
              cat >> "$PGDATA/pg_hba.conf" <<EOF
              # Allow PgBouncer non-SSL connections from pod network
              host    all             postgres        10.244.0.0/16           trust
              host    all             postgres        10.96.0.0/12            trust
              # Allow pg_auto_failover connections
              hostssl all all 10.244.0.0/16 trust
              hostssl all all 10.96.0.0/12 trust
              hostssl all all 0.0.0.0/8 trust
              # Allow application connections
              hostssl all postgres 0.0.0.0/0 trust
              EOF
              echo "Initialization complete"
          securityContext:
            runAsUser: 101
            runAsGroup: 101
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql
      containers:
        - name: postgres-monitor
          image: citusdata/pg_auto_failover:latest
          command: ["/bin/bash", "-c"]
          args:
            - |
              #!/bin/bash
              pg_autoctl run
          securityContext:
            runAsUser: 101
            runAsGroup: 101
          ports:
            - containerPort: 6001
              name: postgres
          env:
            - name: PGDATA
              value: /var/lib/postgresql/pgdata/monitor
            - name: PGPORT
              value: "6001"
            - name: PGUSER
              value: postgres
            - name: PATH
              value: "/usr/lib/postgresql/11/bin:/usr/local/bin:/usr/bin:/bin"
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/
          # More lenient readiness probe
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  export PATH="/usr/lib/postgresql/11/bin:/usr/local/bin:$PATH"
                  # Check if postgres is accepting connections
                  pg_isready -h localhost -p 6001 -U postgres -t 5
            initialDelaySeconds: 30      # Increased from 10
            periodSeconds: 15           # Increased from 5
            timeoutSeconds: 10          # Added timeout
            successThreshold: 1
            failureThreshold: 5         # More lenient
          # More lenient liveness probe
          resources:
            requests:
              memory: "512Mi"
              cpu: "100m"
            limits:
              memory: "1024Mi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - |
                  export PATH="/usr/lib/postgresql/11/bin:/usr/local/bin:$PATH"
                  pg_isready -h localhost -p 6001 -U postgres
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: postgres-monitor-pvc